#ifndef _USB_HID_H
#define _USB_HID_H

//#include <sys/types.h>

#define HID_TX_EP 1


enum hid_dev_class {
	USB_DEV_CLASS_HID = 0x03,
};

enum hid_dev_subclass {
	USB_DEV_SUBCLASS_HID_BOOT = 1,
};

enum hid_dev_proto {
	USB_DEV_PROTO_HID_KEYBOARD = 1,
	USB_DEV_PROTO_HID_MOUSE = 2,
};

enum hid_report_descriptor_type {
	USB_HID_REPORT_DESC_TYPE_HID = 0x21,
	USB_HID_REPORT_DESC_TYPE_REPORT = 0x22,
	USB_HID_REPORT_DESC_TYPE_PHYSICAL = 0x23
};

enum hid_report_type {
	USB_HID_REPORT_TYPE_INPUT = 0x01,
	USB_HID_REPORT_TYPE_OUTPUT = 0x02,
	USB_HID_REPORT_TYPE_FEATURE = 0x03
};

enum hid_protocol_t {
	USB_HID_PROTOCOL_BOOT = 0x0,
	USB_HID_PROTOCOL_REPORT = 0x1
};

struct hid_desc_t {
	uint8_t bLength;
	struct usb_desc_type_t bDescriptorType; /* = USB_DESC_HID */
	struct usb_bcd_t bcdHID;	     /* = 0x0101 */
	uint8_t bCountryCode;
	uint8_t bNumDescriptors;
	struct usb_desc_type_t bDescriptorType1;
	uint16_t wDescriptorLength1;
} __packed;
CTASSERT_SIZE_BYTE(struct hid_desc_t, 9);

struct hid_function_desc {
	struct usb_desc_iface_t iface;
	struct hid_desc_t hid_desc;
	struct usb_desc_ep_t int_in_ep;
} __packed;

struct hid_item_header {
	enum {
		HID_SIZE_0 = 0,
		HID_SIZE_1 = 1,
		HID_SIZE_2 = 2,
		HID_SIZE_4 = 3,
	} bSize : 2;
	enum {
		HID_TYPE_MAIN = 0,
		HID_TYPE_GLOBAL = 1,
		HID_TYPE_LOCAL = 2,
	} bType : 2;
	enum {
		HID_TAG_MAIN_INPUT = 0b1000,
		HID_TAG_MAIN_OUTPUT = 0b1001,
		HID_TAG_MAIN_FEATURE = 0b1011,
		HID_TAG_MAIN_COLLECTION = 0b1010,
		HID_TAG_MAIN_END_COLLECTION = 0b1100,

		HID_TAG_GLOBAL_USAGE_PAGE = 0b0000,
		HID_TAG_GLOBAL_LOGICAL_MINIMUM = 0b0001,
		HID_TAG_GLOBAL_LOGICAL_MAXIMUM = 0b0010,
		HID_TAG_GLOBAL_PHYSICAL_MINIMUM = 0b0011,
		HID_TAG_GLOBAL_PHYSICAL_MAXIMUM = 0b0100,
		HID_TAG_GLOBAL_UNIT_EXPONENT = 0b0101,
		HID_TAG_GLOBAL_UNIT = 0b0110,
		HID_TAG_GLOBAL_REPORT_SIZE = 0b0111,
		HID_TAG_GLOBAL_REPORT_ID = 0b1000,
		HID_TAG_GLOBAL_REPORT_COUNT = 0b1001,
		HID_TAG_GLOBAL_PUSH = 0b1010,
		HID_TAG_GLOBAL_POP = 0b1011,

		HID_TAG_LOCAL_USAGE = 0b0000,
		HID_TAG_LOCAL_USAGE_MINIMUM = 0b0001,
		HID_TAG_LOCAL_USAGE_MAXIMUM = 0b0010,
		HID_TAG_LOCAL_DESIGNATOR_INDEX = 0b0011,
		HID_TAG_LOCAL_DESIGNATOR_MINIMUM = 0b0100,
		HID_TAG_LOCAL_DESIGNATOR_MAXIMUM = 0b0101,
		HID_TAG_LOCAL_STRING_INDEX = 0b0111,
		HID_TAG_LOCAL_STRING_MINIMUM = 0b1000,
		HID_TAG_LOCAL_STRING_MAXIMUM = 0b1001,
		HID_TAG_LOCAL_DELIMITER = 0b1010,
	} bTag : 4;
};

struct hid_item_0 {
	struct hid_item_header;
};

struct hid_item_1 {
	struct hid_item_header;
	uint8_t value;
};

struct hid_item_2 {
	struct hid_item_header;
	uint16_t value;
} __packed;

struct hid_item_4 {
	struct hid_item_header;
	uint32_t value;
} __packed;

#define HID_ITEM_TYPE(val)						\
	typeof(								\
		__builtin_choose_expr((val >= 0 && val < 256) || 	\
				      (val >= -128 && val < 128),	\
			      (struct hid_item_1){{0}},			\
		__builtin_choose_expr((val >= 0 && val < 65536) || 	\
				      (val >= -32768 && val < 32768),	\
			      (struct hid_item_2){{0}},			\
			      (struct hid_item_4){{0}})))

#define HID_ITEM_SIZE(val)						\
	__builtin_choose_expr((val >= 0 && val < 256) ||		\
			      (val >= -128 && val < 128),		\
			      HID_SIZE_1,				\
	__builtin_choose_expr((val >= 0 && val < 65536) ||		\
			      (val >= -32768 && val < 32768),		\
			      HID_SIZE_2,				\
			      HID_SIZE_4				\
		))

struct hid_main_item {
	UNION_STRUCT_START(8);
	uint8_t constant : 1;
	uint8_t variable : 1;
	uint8_t relative : 1;
	uint8_t wrap : 1;
	uint8_t nonlinear : 1;
	uint8_t nopreferred : 1;
	uint8_t nullstate : 1;
	uint8_t volatil : 1;
	uint8_t buffered_bytes : 1; /* on second byte */
	UNION_STRUCT_END;
};

enum hid_collection {
	HID_COLLECTION_PHYSICAL = 0x00,
	HID_COLLECTION_APPLICATION = 0x01,
	HID_COLLECTION_LOGICAL = 0x02,
	HID_COLLECTION_REPORT = 0x03,
	HID_COLLECTION_NAMED_ARRAY = 0x04,
	HID_COLLECTION_USAGE_SWITCH = 0x05,
	HID_COLLECTION_USAGE_MODIFIER = 0x06,
};

enum hid_usage_page {
	HID_USAGE_GENERIC_DESKTOP = 0x01,
	HID_USAGE_SIMULATION = 0x02,
	HID_USAGE_VR = 0x03,
	HID_USAGE_SPORT = 0x04,
	HID_USAGE_GAME = 0x05,
	HID_USAGE_GENERIC_DEVICE = 0x06,
	HID_USAGE_KEYBOARD_KEYPAD = 0x07,
	HID_USAGE_LEDS = 0x08,
	HID_USAGE_BUTTON = 0x09,
	HID_USAGE_ORDINAL = 0x0a,
	HID_USAGE_TELEPHONY = 0x0b,
	HID_USAGE_CONSUMER = 0x0c,
	HID_USAGE_DIGITIZER = 0x0d,
	HID_USAGE_UNICODE = 0x10,
	HID_USAGE_ALPHANUMERIC_DISPLAY = 0x14,
	HID_USAGE_MEDICAL = 0x40,
};

enum hid_usage_generic_desktop {
	HID_USAGE_GENERIC_DESKTOP_POINTER = 0x01,
	HID_USAGE_GENERIC_DESKTOP_MOUSE = 0x02,
	HID_USAGE_GENERIC_DESKTOP_JOYSTICK = 0x04,
	HID_USAGE_GENERIC_DESKTOP_GAME_PAD = 0x05,
	HID_USAGE_GENERIC_DESKTOP_KEYBOARD = 0x06,
	HID_USAGE_GENERIC_DESKTOP_KEYPAD = 0x07,
	HID_USAGE_GENERIC_DESKTOP_MULTI_AXIS_CONTROLLER = 0x08,
	HID_USAGE_GENERIC_DESKTOP_X = 0x30,
	HID_USAGE_GENERIC_DESKTOP_Y = 0x31,
	HID_USAGE_GENERIC_DESKTOP_Z = 0x32,
	HID_USAGE_GENERIC_DESKTOP_RX = 0x33,
	HID_USAGE_GENERIC_DESKTOP_RY = 0x34,
	HID_USAGE_GENERIC_DESKTOP_RZ = 0x35,
	HID_USAGE_GENERIC_DESKTOP_SLIDER = 0x36,
	HID_USAGE_GENERIC_DESKTOP_DIAL = 0x37,
	HID_USAGE_GENERIC_DESKTOP_WHEEL = 0x38,
	HID_USAGE_GENERIC_DESKTOP_HAT_SWITCH_DV = 0x39,
	HID_USAGE_GENERIC_DESKTOP_COUNTED_BUFFER = 0x3A,
	HID_USAGE_GENERIC_DESKTOP_BYTE_COUNT = 0x3B,
	HID_USAGE_GENERIC_DESKTOP_MOTION_WAKEUP = 0x3C,
	HID_USAGE_GENERIC_DESKTOP_START = 0x3D,
	HID_USAGE_GENERIC_DESKTOP_SELECT = 0x3E,
	HID_USAGE_GENERIC_DESKTOP_VX = 0x40,
	HID_USAGE_GENERIC_DESKTOP_VY = 0x41,
	HID_USAGE_GENERIC_DESKTOP_VZ = 0x42,
	HID_USAGE_GENERIC_DESKTOP_VBRX = 0x43,
	HID_USAGE_GENERIC_DESKTOP_VBRY = 0x44,
	HID_USAGE_GENERIC_DESKTOP_VBRZ = 0x45,
	HID_USAGE_GENERIC_DESKTOP_VNO = 0x46,
	HID_USAGE_GENERIC_DESKTOP_FEATURE_NOTIFICATION_DV_DF = 0x47,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_CONTROL = 0x80,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_POWER_DOWN = 0x81,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_SLEEP = 0x82,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_WAKE_UP = 0x83,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_CONTEXT_MENU = 0x84,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_MAIN_MENU = 0x85,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_APP_MENU = 0x86,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_MENU_HELP = 0x87,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_MENU_EXIT = 0x88,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_MENU_SELECT = 0x89,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_MENU_RIGHT = 0x8A,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_MENU_LEFT = 0x8B,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_MENU_UP = 0x8C,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_MENU_DOWN = 0x8D,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_COLD_RESTART = 0x8E,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_WARM_RESTART = 0x8F,
	HID_USAGE_GENERIC_DESKTOP_D_PAD_UP = 0x90,
	HID_USAGE_GENERIC_DESKTOP_D_PAD_DOWN = 0x91,
	HID_USAGE_GENERIC_DESKTOP_D_PAD_RIGHT = 0x92,
	HID_USAGE_GENERIC_DESKTOP_D_PAD_LEFT_OOC = 0x93,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_DOCK = 0xA0,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_UNDOCK = 0xA1,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_SETUP = 0xA2,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_BREAK = 0xA3,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_DEBUGGER_BREAK = 0xA4,
	HID_USAGE_GENERIC_DESKTOP_APPLICATION_BREAK = 0xA5,
	HID_USAGE_GENERIC_DESKTOP_APPLICATION_DEBUGGER_BREAK = 0xA6,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_SPEAKER_MUTE = 0xA7,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_HIBERNATE = 0xA8,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_DISPLAY_INVERT = 0xB0,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_DISPLAY_INTERNAL = 0xB1,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_DISPLAY_EXTERNAL = 0xB2,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_DISPLAY_BOTH = 0xB3,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_DISPLAY_DUAL = 0xB4,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_DISPLAY_TOGGLE_INT_EXT = 0xB5,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_DISPLAY_SWAP_PRIMARY_SECONDARY = 0xB6,
	HID_USAGE_GENERIC_DESKTOP_SYSTEM_DISPLAY_LCD_AUTOSCALE = 0xB7,
};

enum hid_usage_keyboard {
	HID_USAGE_KEYBOARD_NO_EVENT = 0,
	HID_USAGE_KEYBOARD_ERRORROLLOVER = 1,
	HID_USAGE_KEYBOARD_POSTFAIL = 2,
	HID_USAGE_KEYBOARD_ERRORUNDEFINED = 3,
	HID_USAGE_KEYBOARD_A = 4,
	HID_USAGE_KEYBOARD_B = 5,
	HID_USAGE_KEYBOARD_C = 6,
	HID_USAGE_KEYBOARD_D = 7,
	HID_USAGE_KEYBOARD_E = 8,
	HID_USAGE_KEYBOARD_F = 9,
	HID_USAGE_KEYBOARD_G = 10,
	HID_USAGE_KEYBOARD_H = 11,
	HID_USAGE_KEYBOARD_I = 12,
	HID_USAGE_KEYBOARD_J = 13,
	HID_USAGE_KEYBOARD_K = 14,
	HID_USAGE_KEYBOARD_L = 15,
	HID_USAGE_KEYBOARD_M = 16,
	HID_USAGE_KEYBOARD_N = 17,
	HID_USAGE_KEYBOARD_O = 18,
	HID_USAGE_KEYBOARD_P = 19,
	HID_USAGE_KEYBOARD_Q = 20,
	HID_USAGE_KEYBOARD_R = 21,
	HID_USAGE_KEYBOARD_S = 22,
	HID_USAGE_KEYBOARD_T = 23,
	HID_USAGE_KEYBOARD_U = 24,
	HID_USAGE_KEYBOARD_V = 25,
	HID_USAGE_KEYBOARD_W = 26,
	HID_USAGE_KEYBOARD_X = 27,
	HID_USAGE_KEYBOARD_Y = 28,
	HID_USAGE_KEYBOARD_Z = 29,
	HID_USAGE_KEYBOARD_1 = 30,
	HID_USAGE_KEYBOARD_2 = 31,
	HID_USAGE_KEYBOARD_3 = 32,
	HID_USAGE_KEYBOARD_4 = 33,
	HID_USAGE_KEYBOARD_5 = 34,
	HID_USAGE_KEYBOARD_6 = 35,
	HID_USAGE_KEYBOARD_7 = 36,
	HID_USAGE_KEYBOARD_8 = 37,
	HID_USAGE_KEYBOARD_9 = 38,
	HID_USAGE_KEYBOARD_0 = 39,
	HID_USAGE_KEYBOARD_ENTER = 40,
	HID_USAGE_KEYBOARD_ESCAPE = 41,
	HID_USAGE_KEYBOARD_BACKSPACE = 42,
	HID_USAGE_KEYBOARD_TAB = 43,
	HID_USAGE_KEYBOARD_SPACEBAR = 44,
	HID_USAGE_KEYBOARD_MINUS = 45,
	HID_USAGE_KEYBOARD_EQUAL = 46,
	HID_USAGE_KEYBOARD_LBRACK = 47,
	HID_USAGE_KEYBOARD_RBRACK = 48,
	HID_USAGE_KEYBOARD_BACKSLASH = 49,
	HID_USAGE_KEYBOARD_HASH = 50,
	HID_USAGE_KEYBOARD_SEMICOLON = 51,
	HID_USAGE_KEYBOARD_QUOTE = 52,
	HID_USAGE_KEYBOARD_GRAVE_ACCENT = 53,
	HID_USAGE_KEYBOARD_COMMA = 54,
	HID_USAGE_KEYBOARD_PERIOD = 55,
	HID_USAGE_KEYBOARD_SLASH = 56,
	HID_USAGE_KEYBOARD_CAPS_LOCK = 57,
	HID_USAGE_KEYBOARD_F1 = 58,
	HID_USAGE_KEYBOARD_F2 = 59,
	HID_USAGE_KEYBOARD_F3 = 60,
	HID_USAGE_KEYBOARD_F4 = 61,
	HID_USAGE_KEYBOARD_F5 = 62,
	HID_USAGE_KEYBOARD_F6 = 63,
	HID_USAGE_KEYBOARD_F7 = 64,
	HID_USAGE_KEYBOARD_F8 = 65,
	HID_USAGE_KEYBOARD_F9 = 66,
	HID_USAGE_KEYBOARD_F10 = 67,
	HID_USAGE_KEYBOARD_F11 = 68,
	HID_USAGE_KEYBOARD_F12 = 69,
	HID_USAGE_KEYBOARD_PRINTSCREEN = 70,
	HID_USAGE_KEYBOARD_SCROLL_LOCK = 71,
	HID_USAGE_KEYBOARD_PAUSE = 72,
	HID_USAGE_KEYBOARD_INSERT = 73,
	HID_USAGE_KEYBOARD_HOME = 74,
	HID_USAGE_KEYBOARD_PAGEUP = 75,
	HID_USAGE_KEYBOARD_DELETE_FORWARD = 76,
	HID_USAGE_KEYBOARD_END = 77,
	HID_USAGE_KEYBOARD_PAGEDOWN = 78,
	HID_USAGE_KEYBOARD_RIGHTARROW = 79,
	HID_USAGE_KEYBOARD_LEFTARROW = 80,
	HID_USAGE_KEYBOARD_DOWNARROW = 81,
	HID_USAGE_KEYBOARD_UPARROW = 82,
	HID_USAGE_KEYBOARD_KEYPAD_NUM_LOCK = 83,
	HID_USAGE_KEYBOARD_KEYPAD_DIVIDE = 84,
	HID_USAGE_KEYBOARD_KEYPAD_MULTIPLY = 85,
	HID_USAGE_KEYBOARD_KEYPAD_MINUS = 86,
	HID_USAGE_KEYBOARD_KEYPAD_PLUS = 87,
	HID_USAGE_KEYBOARD_KEYPAD_ENTER = 88,
	HID_USAGE_KEYBOARD_KEYPAD_1 = 89,
	HID_USAGE_KEYBOARD_KEYPAD_2 = 90,
	HID_USAGE_KEYBOARD_KEYPAD_3 = 91,
	HID_USAGE_KEYBOARD_KEYPAD_4 = 92,
	HID_USAGE_KEYBOARD_KEYPAD_5 = 93,
	HID_USAGE_KEYBOARD_KEYPAD_6 = 94,
	HID_USAGE_KEYBOARD_KEYPAD_7 = 95,
	HID_USAGE_KEYBOARD_KEYPAD_8 = 96,
	HID_USAGE_KEYBOARD_KEYPAD_9 = 97,
	HID_USAGE_KEYBOARD_KEYPAD_0 = 98,
	HID_USAGE_KEYBOARD_KEYPAD_DECIMALPOINT = 99,
	HID_USAGE_KEYBOARD_BACKSLASH_NONUS = 100,
	HID_USAGE_KEYBOARD_APPLICATION = 101,
	HID_USAGE_KEYBOARD_POWER = 102,
	HID_USAGE_KEYBOARD_KEYPAD_EQUAL = 103,
	HID_USAGE_KEYBOARD_F13 = 104,
	HID_USAGE_KEYBOARD_F14 = 105,
	HID_USAGE_KEYBOARD_F15 = 106,
	HID_USAGE_KEYBOARD_F16 = 107,
	HID_USAGE_KEYBOARD_F17 = 108,
	HID_USAGE_KEYBOARD_F18 = 109,
	HID_USAGE_KEYBOARD_F19 = 110,
	HID_USAGE_KEYBOARD_F20 = 111,
	HID_USAGE_KEYBOARD_F21 = 112,
	HID_USAGE_KEYBOARD_F22 = 113,
	HID_USAGE_KEYBOARD_F23 = 114,
	HID_USAGE_KEYBOARD_F24 = 115,
	HID_USAGE_KEYBOARD_EXECUTE = 116,
	HID_USAGE_KEYBOARD_HELP = 117,
	HID_USAGE_KEYBOARD_MENU = 118,
	HID_USAGE_KEYBOARD_SELECT = 119,
	HID_USAGE_KEYBOARD_STOP = 120,
	HID_USAGE_KEYBOARD_AGAIN = 121,
	HID_USAGE_KEYBOARD_UNDO = 122,
	HID_USAGE_KEYBOARD_CUT = 123,
	HID_USAGE_KEYBOARD_COPY = 124,
	HID_USAGE_KEYBOARD_PASTE = 125,
	HID_USAGE_KEYBOARD_FIND = 126,
	HID_USAGE_KEYBOARD_MUTE = 127,
	HID_USAGE_KEYBOARD_VOLUME_UP = 128,
	HID_USAGE_KEYBOARD_VOLUME_DOWN = 129,
	HID_USAGE_KEYBOARD_LOCKING_CAPS_LOCK = 130,
	HID_USAGE_KEYBOARD_LOCKING_NUM_LOCK = 131,
	HID_USAGE_KEYBOARD_LOCKING_SCROLL_LOCK = 132,
	HID_USAGE_KEYBOARD_KEYPAD_COMMA = 133,
	HID_USAGE_KEYBOARD_KEYPAD_EQUAL_SIGN = 134,
	HID_USAGE_KEYBOARD_INTERNATIONAL1 = 135,
	HID_USAGE_KEYBOARD_INTERNATIONAL2 = 136,
	HID_USAGE_KEYBOARD_INTERNATIONAL3 = 137,
	HID_USAGE_KEYBOARD_INTERNATIONAL4 = 138,
	HID_USAGE_KEYBOARD_INTERNATIONAL5 = 139,
	HID_USAGE_KEYBOARD_INTERNATIONAL6 = 140,
	HID_USAGE_KEYBOARD_INTERNATIONAL7 = 141,
	HID_USAGE_KEYBOARD_INTERNATIONAL8 = 142,
	HID_USAGE_KEYBOARD_INTERNATIONAL9 = 143,
	HID_USAGE_KEYBOARD_LANG1 = 144,
	HID_USAGE_KEYBOARD_LANG2 = 145,
	HID_USAGE_KEYBOARD_LANG3 = 146,
	HID_USAGE_KEYBOARD_LANG4 = 147,
	HID_USAGE_KEYBOARD_LANG5 = 148,
	HID_USAGE_KEYBOARD_LANG6 = 149,
	HID_USAGE_KEYBOARD_LANG7 = 150,
	HID_USAGE_KEYBOARD_LANG8 = 151,
	HID_USAGE_KEYBOARD_LANG9 = 152,
	HID_USAGE_KEYBOARD_ALTERNATE_ERASE = 153,
	HID_USAGE_KEYBOARD_SYSREQ_ATTENTION = 154,
	HID_USAGE_KEYBOARD_CANCEL = 155,
	HID_USAGE_KEYBOARD_CLEAR = 156,
	HID_USAGE_KEYBOARD_PRIOR = 157,
	HID_USAGE_KEYBOARD_RETURN = 158,
	HID_USAGE_KEYBOARD_SEPARATOR = 159,
	HID_USAGE_KEYBOARD_OUT = 160,
	HID_USAGE_KEYBOARD_OPER = 161,
	HID_USAGE_KEYBOARD_CLEAR_AGAIN = 162,
	HID_USAGE_KEYBOARD_CRSEL_PROPS = 163,
	HID_USAGE_KEYBOARD_EXSEL = 164,
	HID_USAGE_KEYBOARD_KEYPAD_00 = 176,
	HID_USAGE_KEYBOARD_KEYPAD_000 = 177,
	HID_USAGE_KEYBOARD_THOUSANDS_SEPARATOR = 178,
	HID_USAGE_KEYBOARD_DECIMAL_SEPARATOR = 179,
	HID_USAGE_KEYBOARD_CURRENCY_UNIT = 180,
	HID_USAGE_KEYBOARD_CURRENCY_SUB_UNIT = 181,
	HID_USAGE_KEYBOARD_KEYPAD_LPAREN = 182,
	HID_USAGE_KEYBOARD_KEYPAD_RPAREN = 183,
	HID_USAGE_KEYBOARD_KEYPAD_LBRACE = 184,
	HID_USAGE_KEYBOARD_KEYPAD_RBRACE = 185,
	HID_USAGE_KEYBOARD_KEYPAD_TAB = 186,
	HID_USAGE_KEYBOARD_KEYPAD_BACKSPACE = 187,
	HID_USAGE_KEYBOARD_KEYPAD_A = 188,
	HID_USAGE_KEYBOARD_KEYPAD_B = 189,
	HID_USAGE_KEYBOARD_KEYPAD_C = 190,
	HID_USAGE_KEYBOARD_KEYPAD_D = 191,
	HID_USAGE_KEYBOARD_KEYPAD_E = 192,
	HID_USAGE_KEYBOARD_KEYPAD_F = 193,
	HID_USAGE_KEYBOARD_KEYPAD_XOR = 194,
	HID_USAGE_KEYBOARD_KEYPAD_HAT = 195,
	HID_USAGE_KEYBOARD_KEYPAD_PERCENT = 196,
	HID_USAGE_KEYBOARD_KEYPAD_LESS = 197,
	HID_USAGE_KEYBOARD_KEYPAD_GREATER = 198,
	HID_USAGE_KEYBOARD_KEYPAD_AMP = 199,
	HID_USAGE_KEYBOARD_KEYPAD_DOUBLE_AMP = 200,
	HID_USAGE_KEYBOARD_KEYPAD_PIPE = 201,
	HID_USAGE_KEYBOARD_KEYPAD_DOUBLE_PIPE = 202,
	HID_USAGE_KEYBOARD_KEYPAD_COLON = 203,
	HID_USAGE_KEYBOARD_KEYPAD_HASH = 204,
	HID_USAGE_KEYBOARD_KEYPAD_SPACE = 205,
	HID_USAGE_KEYBOARD_KEYPAD_AT = 206,
	HID_USAGE_KEYBOARD_KEYPAD_EXCLAM = 207,
	HID_USAGE_KEYBOARD_KEYPAD_MEMORY_STORE = 208,
	HID_USAGE_KEYBOARD_KEYPAD_MEMORY_RECALL = 209,
	HID_USAGE_KEYBOARD_KEYPAD_MEMORY_CLEAR = 210,
	HID_USAGE_KEYBOARD_KEYPAD_MEMORY_ADD = 211,
	HID_USAGE_KEYBOARD_KEYPAD_MEMORY_SUBTRACT = 212,
	HID_USAGE_KEYBOARD_KEYPAD_MEMORY_MULTIPLY = 213,
	HID_USAGE_KEYBOARD_KEYPAD_MEMORY_DIVIDE = 214,
	HID_USAGE_KEYBOARD_KEYPAD_PLUS_MINUS = 215,
	HID_USAGE_KEYBOARD_KEYPAD_CLEAR = 216,
	HID_USAGE_KEYBOARD_KEYPAD_CLEAR_ENTRY = 217,
	HID_USAGE_KEYBOARD_KEYPAD_BINARY = 218,
	HID_USAGE_KEYBOARD_KEYPAD_OCTAL = 219,
	HID_USAGE_KEYBOARD_KEYPAD_DECIMAL = 220,
	HID_USAGE_KEYBOARD_KEYPAD_HEXADECIMAL = 221,
	HID_USAGE_KEYBOARD_LEFTCONTROL = 224,
	HID_USAGE_KEYBOARD_LEFTSHIFT = 225,
	HID_USAGE_KEYBOARD_LEFTALT = 226,
	HID_USAGE_KEYBOARD_LEFT_GUI = 227,
	HID_USAGE_KEYBOARD_RIGHTCONTROL = 228,
	HID_USAGE_KEYBOARD_RIGHTSHIFT = 229,
	HID_USAGE_KEYBOARD_RIGHTALT = 230,
	HID_USAGE_KEYBOARD_RIGHT_GUI = 231,
};

struct hid_ctx {
	struct usbd_function_ctx_header header;
	struct usbd_ep_pipe_state_t *tx_pipe;
	const struct hid_function *hidf;
	uint16_t get_report_outstanding_length;
	uint16_t set_report_length;
	uint8_t set_report_type;
	uint8_t set_report_id;
};

/* standard requests */
typedef void (hid_set_report_descriptor_t)(const enum hid_report_descriptor_type type, const uint8_t index, const void *data_in, const size_t data_len);
typedef size_t (hid_get_report_descriptor_t)(enum hid_report_descriptor_type type, uint8_t index, const void **data_out);
/* class specific requests */
typedef int (hid_set_report_t)(const enum hid_report_type type, const uint8_t report_id, void **data_in, size_t data_len);
typedef int (hid_get_report_t)(struct hid_ctx *ctx, enum hid_report_type type, uint8_t report_id);
typedef void (hid_set_idle_t)(const uint8_t duration, const uint8_t report_id);
typedef uint8_t (hid_get_idle_t)(uint8_t report_id);
typedef void (hid_set_protocol_t)(const enum hid_protocol_t protocol);
typedef enum hid_protocol_t (hid_get_protocol_t)(void);

struct hid_function {
	struct usbd_function usb_func;
	struct hid_ctx *ctx;
	hid_get_report_descriptor_t *get_descriptor;
	hid_get_report_t *get_report;
	hid_set_report_t *set_report;
	hid_get_idle_t *get_idle;
	hid_set_idle_t *set_idle;
	hid_get_protocol_t *get_protocol;
	hid_set_protocol_t *set_protocol;
	const void *report_desc;
	uint16_t report_desc_size;
	uint16_t report_max_size;
};

extern const struct usbd_function hid_function;

int hid_handle_control(struct usb_ctrl_req_t *req, void *data);
void hid_init(const struct usbd_function *, int enable);

void hid_update_data(struct hid_ctx *, uint8_t, const void *, size_t);

#endif
